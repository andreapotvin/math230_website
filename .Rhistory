pop = Pop,
country = country,
electronic = electronic,
folk = folk,
hipHop = hipHop,
indie = indie,
rnb = rnb,
rock = rock
)
ui = fluidPage(
titlePanel("Track Popularity Based on Genre"),
sidebarLayout(
sidebarPanel(
checkboxGroupInput("dists", "Choose Track Genre to Display:",
choices = names(genres),
selected = "pop")
),
mainPanel(
plotlyOutput("histPlot"),
br(),
tableOutput("meanTable")
)
)
)
server = function(input, output) {
output$histPlot = renderPlotly({
selected_dists = input$dists
p = plot_ly()
i = 1
for (name in names(genres)) {
values = genres[[name]]$popularity
mu = mean(values)
color = AmpedTones[i]
}
for (name in selected_dists) {
values = genres[[name]]$popularity
mu = mean(values)
color = AmpedTones[i]
p = add_histogram(p,
x = genres[[name]]$popularity,
name = name,
opacity = 0.6,
marker = list(color = color, line = list(width = 1)))
p = add_segments(
p,
x = mu, xend = mu,
y = 0, yend = 750,
line = list(color = color, dash = "dash"),
name = paste(name, "Mean"),
showlegend = FALSE
)
i = i + 1
}
p = layout(p,
barmode = "overlay",
title = "Track Popularity Distribution by Genre<br><sup>(Dash line indicates genre's mean track popularity score)</sup>",
xaxis = list(title = "Popularity"),
yaxis = list(title = "Frequency"))
p
})
output$meanTable = renderTable({
selected_dists = input$dists
mean_scores = sapply(selected_dists, function(name) {
mean(genres[[name]]$popularity, na.rm = TRUE)
})
data.frame(
Genre = names(mean_scores),
'Mean Popularity Score' = round(mean_scores, 1),
check.names = FALSE
)
})
}
shinyApp(ui, server)
# Graph 1 ~ Interactive
genres = list(
pop = Pop,
country = country,
electronic = electronic,
folk = folk,
hipHop = hipHop,
indie = indie,
rnb = rnb,
rock = rock
)
ui = fluidPage(
titlePanel("Track Popularity Based on Genre"),
sidebarLayout(
sidebarPanel(
checkboxGroupInput("dists", "Choose Track Genre to Display:",
choices = names(genres),
selected = "pop")
),
mainPanel(
plotlyOutput("histPlot"),
br(),
tableOutput("meanTable")
)
)
)
server = function(input, output) {
output$histPlot = renderPlotly({
selected_dists = input$dists
p = plot_ly()
i = 1
for (name in names(genres)) {
values = genres[[name]]$popularity
mu = mean(values)
color = AmpedTones[i]
}
for (name in selected_dists) {
values = genres[[name]]$popularity
mu = mean(values)
color = AmpedTones[i]
p = add_histogram(p,
x = genres[[name]]$popularity,
name = name,
opacity = 0.6,
marker = list(color = color, line = list(width = 1)))
p = add_segments(
p,
x = mu, xend = mu,
y = 0, yend = 750,
line = list(color = color, dash = "dash"),
name = paste(name, "Mean"),
showlegend = FALSE
)
i = i + 1
}
p = layout(p,
barmode = "overlay",
title = "Track Popularity Distribution by Genre<br><sup>(Dash line indicates genre's mean track popularity score)</sup>",
xaxis = list(title = "Popularity"),
yaxis = list(title = "Frequency"))
p
})
output$meanTable = renderTable({
selected_dists = input$dists
mean_scores = sapply(selected_dists, function(name) {
mean(genres[[name]]$popularity, na.rm = TRUE)
})
data.frame(
Genre = names(mean_scores),
'Mean Popularity Score' = round(mean_scores, 1),
check.names = FALSE
)
})
}
shinyApp(ui, server)
View(Pop)
View(boxplot)
View(artist_means)
knitr::opts_chunk$set(echo = TRUE)
# Graph 1 ~ Interactive
genres = list(
pop = Pop,
country = country,
electronic = electronic,
folk = folk,
hipHop = hipHop,
indie = indie,
rnb = rnb,
rock = rock
)
ui = fluidPage(
titlePanel("Track Popularity Based on Genre"),
sidebarLayout(
sidebarPanel(
checkboxGroupInput("dists", "Choose Track Genre to Display:",
choices = names(genres),
selected = "pop")
),
mainPanel(
plotlyOutput("histPlot"),
br(),
tableOutput("meanTable")
)
)
)
library(plotly)
library(shiny)
# Graph 1 ~ Interactive
genres = list(
pop = Pop,
country = country,
electronic = electronic,
folk = folk,
hipHop = hipHop,
indie = indie,
rnb = rnb,
rock = rock
)
ui = fluidPage(
titlePanel("Track Popularity Based on Genre"),
sidebarLayout(
sidebarPanel(
checkboxGroupInput("dists", "Choose Track Genre to Display:",
choices = names(genres),
selected = "pop")
),
mainPanel(
plotlyOutput("histPlot"),
br(),
tableOutput("meanTable")
)
)
)
server = function(input, output) {
output$histPlot = renderPlotly({
selected_dists = input$dists
p = plot_ly()
i = 1
for (name in names(genres)) {
values = genres[[name]]$popularity
mu = mean(values)
color = AmpedTones[i]
}
for (name in selected_dists) {
values = genres[[name]]$popularity
mu = mean(values)
color = AmpedTones[i]
p = add_histogram(p,
x = genres[[name]]$popularity,
name = name,
opacity = 0.6,
marker = list(color = color, line = list(width = 1)))
p = add_segments(
p,
x = mu, xend = mu,
y = 0, yend = 750,
line = list(color = color, dash = "dash"),
name = paste(name, "Mean"),
showlegend = FALSE
)
i = i + 1
}
p = layout(p,
barmode = "overlay",
title = "Track Popularity Distribution by Genre<br><sup>(Dash line indicates genre's mean track popularity score)</sup>",
xaxis = list(title = "Popularity"),
yaxis = list(title = "Frequency"))
p
})
output$meanTable = renderTable({
selected_dists = input$dists
mean_scores = sapply(selected_dists, function(name) {
mean(genres[[name]]$popularity, na.rm = TRUE)
})
data.frame(
Genre = names(mean_scores),
'Mean Popularity Score' = round(mean_scores, 1),
check.names = FALSE
)
})
}
shinyApp(ui, server)
knitr::opts_chunk$set(echo = FALSE)
# Custom Theme
AmpedTones = c("#1DB954", "#984EA3", "#0095b9", "#F78C8C", "#2E5A88",
"#A83854", "#E69F00", "#CC79A7", "#F0E442", "#D55E00")
knitr::opts_chunk$set(echo = FALSE)
Spotify = read.csv("dataset.csv", header = TRUE)
#Cleaning Data
Spotify$explicit = factor(Spotify$explicit, levels = c("False", "True"))
Spotify$mode = factor(Spotify$mode, levels = c("0", "1"), labels = c("Minor", "Major"))
Spotify$track_genre = factor(Spotify$track_genre)
Spotify$key = factor(Spotify$key)
Spotify$time_signature = factor(Spotify$time_signature,
levels = c("0", "1", "2", "3", "4"),
labels = c("3/4", "4/4", "5/4", "6/4", "7/4"))
#Create Pop Dataset
Pop = Spotify[Spotify$track_genre == "pop", ]
attach(Pop)
#Data Sets
hipHop = Spotify[Spotify$track_genre == "hip-hop", ]
rock = Spotify[Spotify$track_genre == "rock", ]
country = Spotify[Spotify$track_genre == "country", ]
rnb = Spotify[Spotify$track_genre == "country", ]
electronic = Spotify[Spotify$track_genre == "electronic", ]
indie = Spotify[Spotify$track_genre == "indie", ]
folk = Spotify[Spotify$track_genre == "folk", ]
summary(Pop$popularity)
# Graph 1 ~ Interactive
genres = list(
pop = Pop,
country = country,
electronic = electronic,
folk = folk,
hipHop = hipHop,
indie = indie,
rnb = rnb,
rock = rock
)
ui = fluidPage(
titlePanel("Track Popularity Based on Genre"),
sidebarLayout(
sidebarPanel(
checkboxGroupInput("dists", "Choose Track Genre to Display:",
choices = names(genres),
selected = "pop")
),
mainPanel(
plotlyOutput("histPlot"),
br(),
tableOutput("meanTable")
)
)
)
server = function(input, output) {
output$histPlot = renderPlotly({
selected_dists = input$dists
p = plot_ly()
i = 1
for (name in names(genres)) {
values = genres[[name]]$popularity
mu = mean(values)
color = AmpedTones[i]
}
for (name in selected_dists) {
values = genres[[name]]$popularity
mu = mean(values)
color = AmpedTones[i]
p = add_histogram(p,
x = genres[[name]]$popularity,
name = name,
opacity = 0.6,
marker = list(color = color, line = list(width = 1)))
p = add_segments(
p,
x = mu, xend = mu,
y = 0, yend = 750,
line = list(color = color, dash = "dash"),
name = paste(name, "Mean"),
showlegend = FALSE
)
i = i + 1
}
p = layout(p,
barmode = "overlay",
title = "Track Popularity Distribution by Genre<br><sup>(Dash line indicates genre's mean track popularity score)</sup>",
xaxis = list(title = "Popularity"),
yaxis = list(title = "Frequency"))
p
})
output$meanTable = renderTable({
selected_dists = input$dists
mean_scores = sapply(selected_dists, function(name) {
mean(genres[[name]]$popularity, na.rm = TRUE)
})
data.frame(
Genre = names(mean_scores),
'Mean Popularity Score' = round(mean_scores, 1),
check.names = FALSE
)
})
}
shinyApp(ui, server)
summary(Pop$popularity)
sd(Pop$popularity)
summary(Pop$popularity)
sd(Pop$popularity)
IQR(Pop$popularity)
# Graph 2 ~ Hexbin Plot
hexplotColors = c("#1DB954", "#0095b9", "#984EA3")
p = ggplot(Pop, aes(x = duration_ms/60000, y = popularity)) +
geom_hex(bins = 30) +
scale_fill_gradientn(colors = hexplotColors) +
labs(title = "Popularity Given Track Duration", x = "Track Length (In Minutes)",
y = "Popularity", fill = "Track Count") +
theme_light()
plot_data <- ggplot_build(p)$data[[1]]
head(plot_data)
# Graph 2 ~ Hexbin Plot
hexplotColors = c("#1DB954", "#0095b9", "#984EA3")
ggplot(Pop, aes(x = duration_ms/60000, y = popularity)) +
geom_hex(bins = 30) +
scale_fill_gradientn(colors = hexplotColors) +
labs(title = "Popularity Given Track Duration", x = "Track Length (In Minutes)",
y = "Popularity", fill = "Track Count") +
theme_light()
summary(Pop$duration_ms/60000)
summary(Pop$loudness)
summary(Pop$loudness[Pop$popularity > 50])
summary(Pop$loudness[Pop$popularity > 50])
summary(Pop$loudness[Pop$popularity < 50])
summary(Pop$duration_ms/60000[Pop$popularity > 50])
summary(Pop$duration_ms/60000[Pop$popularity < 50])
summary(Pop$duration_ms[Pop$popularity > 50])
summary(Pop$duration_ms[Pop$popularity < 50])
62942/60000
586075/60000
107550/60000
410859/60000
228043/60000
207341/60000
mean(Pop$duration_ms)
220672.8/60000
table(Pop$explicit[Pop$popularity > 50])
table(Pop$explicit[Pop$popularity < 50])
(49*100)/595
(49*100)/644
(25*100)/356
table(Pop$time_signature[Pop$popularity])
summary(Pop$popularity[Pop$time_signature == "4/4"]
summary(Pop$popularity[Pop$time_signature == "4/4"]
summary(Pop$popularity[Pop$time_signature == "4/4"])
summary(Pop$popularity[Pop$time_signature == "NA"])
summary(Pop$popularity[Pop$time_signature == "4/4"])
sum(Pop$popularity[Pop$time_signature == "4/4"])
sum(Pop$popularity[Pop$time_signature == "4/4"], na.rm = TRUE)
sum(Pop$popularity[Pop$time_signature == "NA"])
summary(Pop$popularity[Pop$time_signature == "NA"])
summary(Pop$popularity[Pop$time_signature != "4/4" | "6/4" | "7/4"])
summary(Pop$popularity[!(Pop$time_signature %in% c("4/4", "6/4", "7/4"))])
sum(Pop$popularity[!(Pop$time_signature %in% c("4/4", "6/4", "7/4"))])
View(Pop)
sum(!(Pop$time_signature %in% c("4/4", "6/4", "7/4")))
sum(Pop$time_signature == "4/4", na.rm = TRUE)
sum(Pop$time_signature == "4/4", na.rm = TRUE)
sum(Pop$time_signature == "6/4", na.rm = TRUE)
sum(Pop$time_signature == "7/4", na.rm = TRUE)
summary(Pop$popularity[Pop$time_signature == "6/4"])
summary(Pop$popularity[Pop$time_signature == "6/4"], na.rm = TRUE)
summary(Pop$popularity[Pop$time_signature == "6/4"], na.rm = TRUE)
summary(Pop$popularity[Pop$time_signature == "7/4"], na.rm = TRUE)
summary(Pop$liveness[Pop$popularity > "50"])
summary(Pop$liveness[Pop$popularity < "50"])
# Graph 1 ~ Interactive
genres = list(
pop = Pop,
country = country,
electronic = electronic,
folk = folk,
hipHop = hipHop,
indie = indie,
rnb = rnb,
rock = rock
)
ui = fluidPage(
titlePanel("Track Popularity Based on Genre"),
sidebarLayout(
sidebarPanel(
checkboxGroupInput("dists", "Choose Track Genre to Display:",
choices = names(genres),
selected = "pop")
),
mainPanel(
plotlyOutput("histPlot"),
br(),
tableOutput("meanTable")
)
)
)
server = function(input, output) {
output$histPlot = renderPlotly({
selected_dists = input$dists
p = plot_ly()
i = 1
for (name in names(genres)) {
values = genres[[name]]$popularity
mu = mean(values)
color = AmpedTones[i]
}
for (name in selected_dists) {
values = genres[[name]]$popularity
mu = mean(values)
color = AmpedTones[i]
p = add_histogram(p,
x = genres[[name]]$popularity,
name = name,
opacity = 0.6,
marker = list(color = color, line = list(width = 1)))
p = add_segments(
p,
x = mu, xend = mu,
y = 0, yend = 750,
line = list(color = color, dash = "dash"),
name = paste(name, "Mean"),
showlegend = FALSE
)
i = i + 1
}
p = layout(p,
barmode = "overlay",
title = "Track Popularity Distribution by Genre<br><sup>(Dash line indicates genre's mean track popularity score)</sup>",
xaxis = list(title = "Popularity"),
yaxis = list(title = "Frequency"))
p
})
output$meanTable = renderTable({
selected_dists = input$dists
mean_scores = sapply(selected_dists, function(name) {
mean(genres[[name]]$popularity, na.rm = TRUE)
})
data.frame(
Genre = names(mean_scores),
'Mean Popularity Score' = round(mean_scores, 1),
check.names = FALSE
)
})
}
shinyApp(ui, server)
knitr::opts_chunk$set(echo = TRUE)
install.packages("distill")
library(distill)
library(distill)
file.create(".nojeky11")
system("git remote get-url origin")
library(distill)
> file.create(".nojeky11")
library(distill)
file.create(".nojeky11")
system("git remote get-url origin")
